AWSTemplateFormatVersion: "2010-09-09"
Description: Jitsi Video-Conferencing Server
Parameters:
  DNSName:
    Type: String
    Description: What domain to use
  InstanceTypeParameter:
    Type: String
    Default: t3.large
    AllowedValues:
      - m4.large
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - t2.medium
      - t2.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Key pair to use for agent host
    Default: 'rancher'
  SSHLocation:
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: IPv4 CIDR range
Mappings:
  # AMIs are Ubuntu 18.04 20200323 variant
  AWSRegionArch2AMI:
    ap-southeast-2:
      HVM64: ami-07ec7aee8a573b2ae
Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable Jitsi access
      SecurityGroupIngress:
        - IpProtocol: udp
          FromPort: 10000
          ToPort: 10000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 4443
          ToPort: 4443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  EIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      InstanceId: !Ref EC2Instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          Install: ['install_and_enable_cfn_hup','Preinstall','Install'] 
        install_and_enable_cfn_hup:
          files:
            "/etc/cfn/cfn-hup.conf":
              "content" : { "Fn::Join" : ["", [ "[main]\n", "stack=", { "Ref" : "AWS::StackId" }, "\n", "region=", { "Ref" : "AWS::Region" }, "\n" ]]}
              "mode"    : "000400"
              "owner"   : "root"
              "group"   : "root"
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": 
              "content":
                "Fn::Join" : ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                  "         --stack ", { "Ref" : "AWS::StackName" },
                  "         --resource EC2Instance ",
                  "         --configsets full_install ",
                  "         --region ", { "Ref" : "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]
            "/lib/systemd/system/cfn-hup.service":
                "content":
                  "Fn::Join": ["", [
                    "[Unit]\n",
                    "Description=cfn-hup daemon\n\n",
                    "[Service]\n",
                    "Type=simple\n",
                    "ExecStart=/opt/aws/bin/cfn-hup\n", 
                    "Restart=always\n\n",
                    "[Install]\n",
                    "WantedBy=multi-user.target"]]
          "commands": 
            "01enable_cfn_hup" : { "command" : "systemctl enable cfn-hup.service" }
            "02start_cfn_hup" : { "command" : "systemctl start cfn-hup.service" }
        Preinstall:
          commands:
            01_jitsisources:
              command: |
                echo 'deb https://download.jitsi.org stable/' >> /etc/apt/sources.list.d/jitsi-stable.list
                wget -qO - https://download.jitsi.org/jitsi-key.gpg.key | apt-key add -
                apt-get update
            # should be executed after system.conf is reconfigured
            02_systemconfreload:
              command: systemctl daemon-reload
            10_jitsidefaults:
              command: !Sub |
                echo "jitsi-meet-prosody jitsi-videobridge/jvb-hostname string ${DNSName}" | debconf-set-selections 
                echo "jitsi-videobridge jitsi-videobridge/jvb-hostname string ${DNSName}" | debconf-set-selections 
                echo "jitsi-meet-web-config jitsi-meet/cert-choice select 'Generate a new self-signed certificate (You will later get a chance to obtain a Let's encrypt certificate)'" | debconf-set-selections
                echo ${EIP} ${DNSName} >> /etc/hosts
          files:
            /etc/systemd/system.conf:
              content: |
                [Manager]
                DefaultLimitNOFILE=65000
                DefaultLimitNPROC=65000
                DefaultTasksMax=65000
              mode: 000644
              group: root
              owner: root
            /etc/hostname:
              content: !Sub |
                ${DNSName}
        Install:
          packages:
            apt:
              jitsi-meet: []
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
        Count: 1
    Properties:
      InstanceType: !Ref InstanceTypeParameter
      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref "AWS::Region", "HVM64"]
      SecurityGroups: [!Ref SecurityGroup]
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          apt-get update
          apt-get upgrade -y
          apt-get install -y python python-setuptools debconf-utils
          mkdir -p /opt/aws/bin
          wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          python /usr/lib/python2.7/dist-packages/easy_install.py --script-dir /opt/aws/bin aws-cfn-bootstrap-latest.tar.gz
          
          # Install the files and packages from the metadata
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance --configsets Install  --region ${AWS::Region} 
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}
Outputs:
  IPAddress:
    Description: IP Address of the EC2 instance
    Value: !GetAtt EC2Instance.PublicDnsName


